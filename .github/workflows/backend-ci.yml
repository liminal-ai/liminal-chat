name: Backend CI/CD

on:
  pull_request:
    branches: [main]
    paths:
      - 'apps/liminal-api/**'
      - '.github/workflows/backend-ci.yml'
  push:
    branches: [main]
    paths:
      - 'apps/liminal-api/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: blacksmith-4vcpu-ubuntu-2404

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared types
        run: pnpm --filter @liminal/shared-types build

      - name: Generate Convex types
        working-directory: apps/liminal-api
        run: npx convex codegen

      # Format Check (Fail Fast)
      - name: Format Check
        id: format
        if: ${{ vars.DISABLE_FORMAT_CHECK != 'true' }}
        run: |
          echo "Checking code formatting..."
          if ! pnpm format:check; then
            echo "::error::Code formatting issues found"
            echo ""
            echo "To fix this:"
            echo "1. Run: pnpm format:fix"
            echo "2. Commit the changes"
            echo "3. Configure Prettier in your IDE for future changes"
            echo "4. Consider setting up the git pre-commit hook"
            echo ""
            echo "This usually means you didn't run the commitprep workflow locally."
            exit 1
          fi

      - name: Format Check Disabled Warning
        if: ${{ vars.DISABLE_FORMAT_CHECK == 'true' }}
        run: |
          echo "::warning::⚠️ FORMAT CHECK IS DISABLED"
          echo "Format checking is currently disabled via DISABLE_FORMAT_CHECK repository variable."

      # Security Scanning (Critical - Stop on fail)
      - name: TruffleHog Security Scan
        if: ${{ vars.DISABLE_SECURITY_CHECK != 'true' }}
        uses: trufflesecurity/trufflehog@v3.89.2
        with:
          path: ./
          # For PRs: scan diff from base to head
          # For pushes to main: scan full repository (no base/head specified)
          base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || '' }}
          head: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || '' }}

      - name: Additional Security Checks
        id: security
        if: ${{ vars.DISABLE_SECURITY_CHECK != 'true' }}
        run: |
          echo "Running additional security checks..."
          pnpm precommit:env-files
          pnpm precommit:api-keys

      - name: Security Check Disabled Warning
        if: ${{ vars.DISABLE_SECURITY_CHECK == 'true' }}
        run: |
          echo "::error::⚠️ SECURITY CHECK IS DISABLED"
          echo "Security scanning is currently disabled via DISABLE_SECURITY_CHECK repository variable."
          echo "This is a critical security risk and should only be temporary."

      # Dependency Security (Stop only on high/critical vulnerabilities)
      - name: Dependency Security Audit
        if: ${{ vars.DISABLE_DEPENDENCY_AUDIT != 'true' }}
        run: |
          echo "Checking for vulnerable dependencies..."
          # Run audit and capture output
          AUDIT_OUTPUT=$(pnpm audit --prod 2>&1 || true)
          echo "$AUDIT_OUTPUT"

          # Check for high/critical vulnerabilities
          if echo "$AUDIT_OUTPUT" | grep -E "(high|critical)" > /dev/null; then
            echo "::error::High or critical vulnerabilities found!"
            exit 1
          elif echo "$AUDIT_OUTPUT" | grep -E "vulnerabilities found" > /dev/null; then
            echo "::warning::Low/medium vulnerabilities found (non-blocking)"
          else
            echo "No vulnerabilities found"
          fi

      - name: Dependency Audit Disabled Warning
        if: ${{ vars.DISABLE_DEPENDENCY_AUDIT == 'true' }}
        run: |
          echo "::warning::⚠️ DEPENDENCY AUDIT IS DISABLED"

      # Lint Check (Stop on errors)
      - name: Lint Check
        if: ${{ vars.DISABLE_LINT_CHECK != 'true' }}
        run: |
          echo "Running ESLint across all packages..."
          pnpm lint

      - name: Lint Check Disabled Warning
        if: ${{ vars.DISABLE_LINT_CHECK == 'true' }}
        run: |
          echo "::warning::⚠️ LINT CHECK IS DISABLED"

      # TypeScript Compilation (Stop on errors)
      - name: TypeScript Check
        if: ${{ vars.DISABLE_TYPECHECK != 'true' }}
        run: |
          echo "Checking TypeScript compilation..."
          pnpm typecheck

      - name: TypeScript Check Disabled Warning
        if: ${{ vars.DISABLE_TYPECHECK == 'true' }}
        run: |
          echo "::warning::⚠️ TYPESCRIPT CHECK IS DISABLED"

      # Integration Tests (Stop on failures)
      # NOTE: Temporarily disabled - tests require local-dev-service which isn't available in CI
      # - name: Integration Tests
      #   if: ${{ vars.DISABLE_INTEGRATION_TESTS != 'true' }}
      #   working-directory: apps/liminal-api
      #   env:
      #     SYSTEM_USER_EMAIL: ${{ secrets.SYSTEM_USER_EMAIL }}
      #     SYSTEM_USER_PASSWORD: ${{ secrets.SYSTEM_USER_PASSWORD }}
      #     WORKOS_CLIENT_ID: ${{ secrets.WORKOS_CLIENT_ID }}
      #     WORKOS_API_KEY: ${{ secrets.WORKOS_API_KEY }}
      #   run: |
      #     echo "Running integration tests..."
      #     pnpm test

      - name: Integration Tests Disabled Warning
        run: |
          echo "::warning::⚠️ INTEGRATION TESTS ARE TEMPORARILY DISABLED"
          echo "Integration tests are disabled because they require local-dev-service which isn't available in CI environment."
          echo "Tests should be run locally before merging."

      # Show disabled gates summary
      - name: Disabled Gates Summary
        if: ${{ vars.DISABLE_FORMAT_CHECK == 'true' || vars.DISABLE_SECURITY_CHECK == 'true' || vars.DISABLE_DEPENDENCY_AUDIT == 'true' || vars.DISABLE_LINT_CHECK == 'true' || vars.DISABLE_TYPECHECK == 'true' || vars.DISABLE_INTEGRATION_TESTS == 'true' }}
        run: |
          echo "## ⚠️ DISABLED QUALITY GATES ⚠️" >> $GITHUB_STEP_SUMMARY
          echo "The following gates are currently disabled:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ vars.DISABLE_FORMAT_CHECK }}" = "true" ]; then
            echo "- ❌ **Format Check** (DISABLE_FORMAT_CHECK=true)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ vars.DISABLE_SECURITY_CHECK }}" = "true" ]; then
            echo "- ❌ **Security Scan** (DISABLE_SECURITY_CHECK=true) 🚨 **CRITICAL RISK**" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ vars.DISABLE_DEPENDENCY_AUDIT }}" = "true" ]; then
            echo "- ❌ **Dependency Audit** (DISABLE_DEPENDENCY_AUDIT=true)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ vars.DISABLE_LINT_CHECK }}" = "true" ]; then
            echo "- ❌ **Lint Check** (DISABLE_LINT_CHECK=true)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ vars.DISABLE_TYPECHECK }}" = "true" ]; then
            echo "- ❌ **TypeScript Check** (DISABLE_TYPECHECK=true)" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ vars.DISABLE_INTEGRATION_TESTS }}" = "true" ]; then
            echo "- ❌ **Integration Tests** (DISABLE_INTEGRATION_TESTS=true)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**To re-enable:** Go to Repository Settings → Secrets and variables → Actions → Variables" >> $GITHUB_STEP_SUMMARY
